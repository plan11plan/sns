package com.example.sns.mock.post;

import com.example.sns.core.post.domain.entity.Post;
import com.example.sns.core.post.domain.entity.PostId;
import com.example.sns.core.post.exception.PostNotFoundException;
import com.example.sns.core.post.service.port.PostWriteRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakePostWriteRepository implements PostWriteRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Post> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Post save(Post post) {
        if (post.getId() == null || post.getPostIdValue() == 0) {
            Post newPost = Post.builder()
                    .id(PostId.of(autoGeneratedId.incrementAndGet())) // 새 ID 생성
                    .writerId(post.getWriterId())
                    .title(post.getTitle())
                    .content(post.getContent())
                    .status(post.getStatus())
                    .likeCount(post.getLikeCount())
                    .createdAt(post.getCreatedAt())
                    .modifiedAt(post.getModifiedAt())
                    .build();
            data.add(newPost);
            return newPost;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), post.getId()));
            data.add(post);
            return post;
        }
    }

    @Override
    public Post getById(Long id) {
        return data.stream()
                .filter(post -> post.getId().getValue().equals(id))
                .findFirst()
                .orElseThrow(PostNotFoundException::new);
    }
}