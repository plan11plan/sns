package com.example.sns.mock.post;

import com.example.sns.core.post.domain.entity.Comment;
import com.example.sns.core.post.domain.entity.CommentId;
import com.example.sns.core.post.service.port.CommentWriteRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

public class FakeCommentWriteRepository implements CommentWriteRepository {
    private final List<Comment> data = Collections.synchronizedList(new ArrayList<>());
    private final AtomicLong autoGeneratedId = new AtomicLong(0);

    @Override
    public Comment save(Comment comment) {
        if (comment.getCommentIdValue() == null || comment.getCommentIdValue() == 0) {
            Comment newComment = Comment.builder()
                    .id(CommentId.of(autoGeneratedId.incrementAndGet())) // 새 ID 생성
                    .postId(comment.getPostId())
                    .parentId(comment.getParentId())
                    .writerId(comment.getWriterId())
                    .content(comment.getContent())
                    .createdAt(comment.getCreatedAt())
                    .modifiedAt(comment.getModifiedAt())
                    .build();
            data.add(newComment);
            return newComment;
        } else {
            data.removeIf(item -> item.getCommentIdValue().equals(comment.getCommentIdValue()));
            data.add(comment);
            return comment;
        }
    }

    @Override
    public void delete(Comment comment) {
        data.removeIf(item -> item.getCommentIdValue().equals(comment.getCommentIdValue()));
    }

    public List<Comment> getAll() {
        return data;
    }
}
