package com.example.sns.mock.post;

import com.example.sns.core.post.domain.entity.PostLike;
import com.example.sns.core.post.domain.entity.PostLikeId;
import com.example.sns.core.post.domain.service.port.PostLikeWriteRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

public class FakePostLikeWriteRepository implements PostLikeWriteRepository {
    private final List<PostLike> data = Collections.synchronizedList(new ArrayList<>());
    private final AtomicLong autoGeneratedId = new AtomicLong(0);

    @Override
    public void save(PostLike postLike) {
        if (postLike.getId() == null || postLike.getPostLikeIdValue() == 0) {
            PostLike newPostLike = PostLike.builder()
                    .id(PostLikeId.of(autoGeneratedId.incrementAndGet())) // 새 ID 생성
                    .userId(postLike.getUserId())
                    .postId(postLike.getPostId())
                    .createdAt(postLike.getCreatedAt())
                    .build();
            data.add(newPostLike);
        } else {
            data.removeIf(item -> item.getId().equals(postLike.getId()));
            data.add(postLike);
        }
    }

    public List<PostLike> getAll() {
        return data;
    }
}
