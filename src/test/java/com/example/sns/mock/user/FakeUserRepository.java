package com.example.sns.mock.user;

import com.example.sns.core.common.exception.ResourceNotFoundException;
import com.example.sns.core.user.domain.entity.UserId;
import com.example.sns.core.user.domain.entity.root.User;
import com.example.sns.core.user.service.port.UserRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeUserRepository implements UserRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(1); // ID 1부터 시작
    private final List<User> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public User getById(Long id) {
        return findById(id).orElseThrow(() -> new ResourceNotFoundException("Users", id));
    }

    @Override
    public Optional<User> findById(Long id) {
        return data.stream().filter(user -> user.getId().getValue().equals(id)).findFirst();
    }

    @Override
    public Optional<User> findByIdAndStatus(Long id, String status) {
        return data.stream().filter(user -> user.getId().getValue().equals(id) && user.getStatus().name().equals(status)).findFirst();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, String status) {
        return data.stream().filter(user -> user.getEmail().getValue().equals(email) && user.getStatus().name().equals(status)).findFirst();
    }

    @Override
    public User save(User user) {
        if (user.getId() == null || user.getId().getValue() == 0) {
            User newUser = User.builder()
                    .id(UserId.of(autoGeneratedId.incrementAndGet()))
                    .email(user.getEmail())
                    .password(user.getPassword())
                    .nickname(user.getNickname())
                    .birthday(user.getBirthday())
                    .createdAt(user.getCreatedAt())
                    .sex(user.getSex())
                    .certificationCode(user.getCertificationCode())
                    .status(user.getStatus())
                    .lastLoginAt(user.getLastLoginAt())
                    .build();
            data.add(newUser);
            return newUser;
        } else {
            data.removeIf(existingUser -> existingUser.getId().equals(user.getId()));
            data.add(user);
            return user;
        }
    }

    @Override
    public Optional<List<User>> findAllByIdIn(List<Long> ids) {
        List<User> result = data.stream()
                .filter(user -> ids.contains(user.getId().getValue()))
                .collect(Collectors.toList());
        return Optional.of(result);
    }
}
