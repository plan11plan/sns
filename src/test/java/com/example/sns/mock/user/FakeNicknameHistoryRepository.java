package com.example.sns.mock.user;

import com.example.sns.core.user.domain.entity.NicknameHistory;
import com.example.sns.core.user.domain.entity.NicknameHistoryId;
import com.example.sns.core.user.domain.service.port.NicknameHistoryRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeNicknameHistoryRepository implements NicknameHistoryRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<NicknameHistory> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public NicknameHistory save(NicknameHistory nicknameHistory) {
        if (nicknameHistory.getId() == null || nicknameHistory.getNicknameHistoryIdValue() == 0) {
            NicknameHistory newNicknameHistory = NicknameHistory.builder()
                    .id(NicknameHistoryId.of(autoGeneratedId.incrementAndGet()))
                    .userId(nicknameHistory.getUserId())
                    .nickname(nicknameHistory.getNickname())
                    .createdAt(nicknameHistory.getCreatedAt())
                    .build();
            data.add(newNicknameHistory);
            return newNicknameHistory;
        } else {
            data.removeIf(existingNicknameHistory -> existingNicknameHistory.getId().equals(nicknameHistory.getId()));
            data.add(nicknameHistory);
            return nicknameHistory;
        }
    }

    @Override
    public Optional<List<NicknameHistory>> findAllByUserId(Long userId) {
        List<NicknameHistory> result = data.stream()
                .filter(nicknameHistory -> nicknameHistory.getUserId().equals(userId))
                .collect(Collectors.toList());
        return Optional.of(result);
    }
}
